/******************************************************************************
 *  Copyright (c) 2018, Xilinx, Inc.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1.  Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *  2.  Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *
 *  3.  Neither the name of the copyright holder nor the names of its 
 *      contributors may be used to endorse or promote products derived from 
 *      this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION). HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/
 
/*****************************************************************************
*
*     Author: Murad Qasaimeh <muradq@xilinx.com>
*     Date:   2018/06/11
*
*****************************************************************************/

///SDx temporal fix for Clang issue
#ifdef __SDSCC__
#undef __ARM_NEON__
#undef __ARM_NEON
#include <opencv2/core/core.hpp>
#define __ARM_NEON__
#define __ARM_NEON
#else
#include <opencv2/core/core.hpp>
#endif
//#include <opencv2/core/core.hpp>

#include "common/xf_common.h"
#include <hls_video.h>
#include "imgproc/xf_threshold.hpp" 

#include <Utils/inc/UtilsForXfOpenCV.h>
#include "xfSDxThreshold.h"
  
double xF_threshold(cv::Mat &src, cv::Mat &dst, double thresh, double maxval, int type)
{
	const int thresholdTypeTP = ${thresholdTypeCMakeParam};
	const int maxWidthTP = ${maxWidthCMakeParam};
	const int maxHeightTP = ${maxHeightCMakeParam};
	const int srcTypeTP = ${srcTypeCMakeParam};
	const int dstTypeTP = ${srcTypeCMakeParam};
	const int NPCTP = ${NPCCMakeParam};
	
	//check for limitations of xfOpenCV module
	assert(src.channels() == 1);
	assert(dst.channels() == 1);
	assert(maxval == 255);		
	assert(type == 0); //cv::THRESH_BINARY=0
	
	xf::Mat<srcTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgInput;
	xf::Mat<dstTypeTP, maxHeightTP, maxWidthTP, NPCTP>* imgOutput;

	// perform some checks on the src type
	cvToXfSource(src, imgInput);
          
	// perform some checks on the dst type
	bool dstPostConversion = cvToXfDestination(dst, imgOutput, src); 
	//cast double to unsigned short
	short xfThresh= (short) thresh;
	// set threshold range to 0
	short xfThresh_upper=0;
	short xfThresh_lower=0;

	// call xf::threshold
	xf::Threshold<${thresholdTypeCMakeParam},${srcTypeCMakeParam},${maxHeightCMakeParam},${maxWidthCMakeParam},${NPCCMakeParam}>(*imgInput,*imgOutput, xfThresh, xfThresh_upper, xfThresh_lower);

	//perform checks on the dst type
	if (dstPostConversion) {
		xfMatDepthPostConversion(dst,imgOutput);
	}
	
	delete imgInput;
	delete imgOutput;
	
	return thresh;	
}

