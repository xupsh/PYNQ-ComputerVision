/******************************************************************************
 *  Copyright (c) 2018, Xilinx, Inc.
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1.  Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *  2.  Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution.
 *
 *  3.  Neither the name of the copyright holder nor the names of its 
 *      contributors may be used to endorse or promote products derived from 
 *      this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION). HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/
 
/*****************************************************************************
*
*     Author: Kristof Denolf <kristof@xilinx.com>
*     Date:   2018/01/25
*
*****************************************************************************/

///SDx temporal fix for Clang issue
#ifdef __SDSCC__
#undef __ARM_NEON__
#undef __ARM_NEON
#include <opencv2/core/core.hpp>
#define __ARM_NEON__
#define __ARM_NEON
#else
#include <opencv2/core/core.hpp>
#endif
//#include <opencv2/core/core.hpp>
#include "opencv2/imgproc/imgproc.hpp"

#include "common/xf_common.h"


#include <hls_video.h>
#include "imgproc/xf_remap.hpp" 

#include <Utils/inc/UtilsForXfOpenCV.h>

#include "xfSDxRemap.h"

//PL instatiation parameters

void xF_remap(cv::Mat &src, cv::Mat &dst, cv::Mat &map1, cv::Mat &map2, int interpolation, int borderMode, const cv::Scalar& borderValue)
{
	const int windowRowsTP = ${windowRowsCMakeParam};
	const int borderTypeTP = ${borderTypeCMakeParam};
	const int maxWidthTP = ${maxWidthCMakeParam};
	const int maxHeightTP = ${maxHeightCMakeParam};
	const int srcTypeTP = ${srcTypeCMakeParam};
	const int dstTypeTP = ${srcTypeCMakeParam}; 
	const int mapTypeTP = ${mapTypeCMakeParam};
	const int NPCTP = ${NPCCMakeParam};
	
	//check for limitations of xfOpenCV module
	assert(src.channels() == 1);
	assert(dst.channels() == 1);
	assert(borderTypeTP == XF_BORDER_CONSTANT); //XF only supports border constant
	assert(borderMode == borderTypeTP);
	assert(mapTypeTP == XF_32FC1); //only floating point x,y maps supported
	assert(map1.type() == CV_32FC1 && map2.type() == CV_32FC1); //only floating point x,y maps supported
	assert(interpolation == cv::INTER_NEAREST|| interpolation == cv::INTER_LINEAR); //xf opencv only supports nearest neighbor or bilinear interpolation 
	
	xf::Mat<srcTypeTP, maxHeightTP, maxWidthTP, NPCTP> *imgInput;
	xf::Mat<dstTypeTP, maxHeightTP, maxWidthTP, NPCTP> *imgOutput;
	xf::Mat<mapTypeTP, maxHeightTP, maxWidthTP, NPCTP> *mapX, *mapY;

	// perform some checks on the src type
	cvToXfSource(src,imgInput);
          
	// perform some checks on the dst type
	bool dstPostConversion = cvToXfDestination(dst, imgOutput, src);
	
	// assign the maps
	mapX = new xf::Mat<mapTypeTP, maxHeightTP, maxWidthTP, NPCTP>(map1.rows,map1.cols,(void *) map1.data);
	mapY = new xf::Mat<mapTypeTP, maxHeightTP, maxWidthTP, NPCTP>(map2.rows,map2.cols,(void *) map2.data);
	
	// call xf::remap	
	xf::remap<${windowRowsCMakeParam},${srcTypeCMakeParam},${mapTypeCMakeParam},${srcTypeCMakeParam},${maxHeightCMakeParam},${maxWidthCMakeParam},${NPCCMakeParam}>(*imgInput,*imgOutput,*mapX,*mapY,interpolation);

	// If SW post conversion required, we do it here
	if (dstPostConversion) {
		xfMatDepthPostConversion(dst,imgOutput);
	}   
	
	delete imgInput;
	delete imgOutput;
	delete mapX;
	delete mapY;
	
	return;
}
